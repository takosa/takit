conn5 = connectivity5,
conn10 = connectivity10,
conn40 = connectivity40,
sil = silhouette,
i = idx)
}
score <-
test_data %>%
group_split(i) %>%
map(~validate(., FAM.ROX, VIC.ROX, type, i)) %>%
bind_rows()
score
plot_result(score, test_data, dunn)
# normalize
test_data <-
read.csv("test_data.csv") %>%
mutate(FAM.ROX = normalizer(FAM/ROX), normalizer(VIC.ROX = VIC/ROX))
validate <- function(df, x, y, cluster, idx) {
x <- enquo(x)
y <- enquo(y)
cluster <- enquo(cluster)
idx <- pull(df, !!enquo(idx))[1]
dat <-
df %>%
select(!!x, !!y)
cluster <-
df %>%
pull(!!cluster) %>%
as.factor() %>%
as.integer()
dunn_index <- clValid::dunn(clusters = cluster, Data = dat)
connectivity5 <- clValid::connectivity(clusters = cluster, Data = dat, neighbSize = 5)
connectivity10 <- clValid::connectivity(clusters = cluster, Data = dat, neighbSize = 10)
connectivity40 <- clValid::connectivity(clusters = cluster, Data = dat, neighbSize = 40)
silhouette <- mean(cluster::silhouette(cluster, dist = dist(dat))[, "sil_width"])
#my_dunn_index <- my_dunn(df, x, y, cluster)
data.frame(
dunn = dunn_index,
conn5 = connectivity5,
conn10 = connectivity10,
conn40 = connectivity40,
sil = silhouette,
i = idx)
}
normalizer <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
dbl2factor <- function(x, desc=FALSE) {
x <- signif(x, 3)
uni_x <- unique(x)
levels <- as.character(uni_x)[order(uni_x, decreasing = desc)]
factor(as.character(x), levels = levels)
}
plot_result <- function(score, dat, metric) {
metric <- enquo(metric)
score %>%
mutate(!!metric := dbl2factor(!!metric)) %>%
right_join(test_data, by = "i") %>%
ggplot(aes(FAM.ROX, VIC.ROX, col=type)) +
geom_point() +
facet_wrap(vars(!!metric), nrow = 2, labeller = label_both) +
theme(aspect.ratio = 1)
}
test_data <-
read.csv("test_data.csv") %>%
mutate(FAM.ROX = FAM/ROX, VIC.ROX = VIC/ROX)
score <-
test_data %>%
group_split(i) %>%
map(~validate(., FAM.ROX, VIC.ROX, type, i)) %>%
bind_rows()
plot_result(score, test_data, dunn)
# normalize
test_data <-
read.csv("test_data.csv") %>%
mutate(FAM.ROX = normalizer(FAM/ROX), normalizer(VIC.ROX = VIC/ROX))
score <-
test_data %>%
group_split(i) %>%
map(~validate(., FAM.ROX, VIC.ROX, type, i)) %>%
bind_rows()
plot_result(score, test_data, dunn)
# normalize
test_data <-
read.csv("test_data.csv") %>%
mutate(FAM.ROX = normalizer(FAM/ROX), VIC.ROX = normalizer(VIC/ROX))
score <-
test_data %>%
group_split(i) %>%
map(~validate(., FAM.ROX, VIC.ROX, type, i)) %>%
bind_rows()
plot_result(score, test_data, dunn)
library(dplyr)
library(ggplot2)
library(purrr)
plot_result <- function(score, dat, metric) {
print(metric)
metric <- enquo(metric)
score %>%
mutate(!!metric := dbl2factor(!!metric)) %>%
right_join(test_data, by = "i") %>%
ggplot(aes(FAM.ROX, VIC.ROX, col=type)) +
geom_point() +
facet_wrap(vars(!!metric), nrow = 2, labeller = label_both) +
theme(aspect.ratio = 1)
}
plot_result(score, test_data, dunn)
plot_result <- function(score, dat, metric) {
metric <- enquo(metric)
print(metric)
score %>%
mutate(!!metric := dbl2factor(!!metric)) %>%
right_join(test_data, by = "i") %>%
ggplot(aes(FAM.ROX, VIC.ROX, col=type)) +
geom_point() +
facet_wrap(vars(!!metric), nrow = 2, labeller = label_both) +
theme(aspect.ratio = 1)
}
plot_result <- function(score, dat, metric) {
metric <- enquo(metric)
print(metric)
score %>%
mutate(!!metric := dbl2factor(!!metric)) %>%
right_join(test_data, by = "i") %>%
ggplot(aes(FAM.ROX, VIC.ROX, col=type)) +
geom_point() +
facet_wrap(vars(!!metric), nrow = 2, labeller = label_both) +
theme(aspect.ratio = 1)
}
plot_result(score, test_data, dunn)
plot_result <- function(score, dat, metric) {
metric <- enquo(metric)
print(as.character(metric))
score %>%
mutate(!!metric := dbl2factor(!!metric)) %>%
right_join(test_data, by = "i") %>%
ggplot(aes(FAM.ROX, VIC.ROX, col=type)) +
geom_point() +
facet_wrap(vars(!!metric), nrow = 2, labeller = label_both) +
theme(aspect.ratio = 1)
}
plot_result(score, test_data, dunn)
plot_result <- function(score, dat, metric) {
print(as.character(metric))
metric <- enquo(metric)
score %>%
mutate(!!metric := dbl2factor(!!metric)) %>%
right_join(test_data, by = "i") %>%
ggplot(aes(FAM.ROX, VIC.ROX, col=type)) +
geom_point() +
facet_wrap(vars(!!metric), nrow = 2, labeller = label_both) +
theme(aspect.ratio = 1)
}
score <-
test_data %>%
group_split(i) %>%
map(~validate(., FAM.ROX, VIC.ROX, type, i)) %>%
bind_rows()
plot_result(score, test_data, dunn)
plot_result <- function(score, dat, metric) {
metric <- enquo(metric)
print(as.character(metric)[2])
score %>%
mutate(!!metric := dbl2factor(!!metric)) %>%
right_join(test_data, by = "i") %>%
ggplot(aes(FAM.ROX, VIC.ROX, col=type)) +
geom_point() +
facet_wrap(vars(!!metric), nrow = 2, labeller = label_both) +
theme(aspect.ratio = 1)
}
plot_result(score, test_data, dunn)
score
mutate_all(score, rank)
startsWith("abc", "ab")
plot_result <- function(score, dat, metric) {
metric <- enquo(metric)
desc <- startWith(as.character(metric)[2], "conn")
score %>%
mutate(!!metric := dbl2factor(!!metric, desc)) %>%
right_join(test_data, by = "i") %>%
ggplot(aes(FAM.ROX, VIC.ROX, col=type)) +
geom_point() +
facet_wrap(vars(!!metric), nrow = 2, labeller = label_both) +
theme(aspect.ratio = 1)
}
plot_result(score, test_data, dunn)
plot_result <- function(score, dat, metric) {
metric <- enquo(metric)
desc <- startsWith(as.character(metric)[2], "conn")
score %>%
mutate(!!metric := dbl2factor(!!metric, desc)) %>%
right_join(test_data, by = "i") %>%
ggplot(aes(FAM.ROX, VIC.ROX, col=type)) +
geom_point() +
facet_wrap(vars(!!metric), nrow = 2, labeller = label_both) +
theme(aspect.ratio = 1)
}
plot_result(score, test_data, dunn)
plot_result(score, test_data, conn5)
plot_result(score, test_data, conn10)
plot_result(score, test_data, conn40)
plot_result(score, test_data, sil)
f <- function(x) print(as_name(x))
f <- function(x) print(rlang::as_name(x))
f <- function(x) print(as_name(x))
mutate(head(iris), x = f(Sepal.Width))
f <- function(x) print(rlang::as_name(x))
mutate(head(iris), x = f(Sepal.Width))
mutate(head(iris), x =f(Sepal.Width))
f(aaa)
f <- function(x) print(rlang::as_name(enquo(x)))
f(aaa)
?knitr::opts_chunk$set
?knitr::opts_chunk
shiny::runApp('~/MetricsForCluster')
setwd("~/")
shiny::runApp('~/MetricsForCluster')
runApp('')
shiny::runApp('~/MetricsForCluster')
runApp('')
runApp('')
shiny::runApp('~/MetricsForCluster')
shiny::runApp('~/MetricsForCluster')
runApp('')
shiny::runApp('~/MetricsForCluster')
shiny::runApp('~/MetricsForCluster')
shiny::runApp('~/MetricsForCluster')
shiny::runApp('~/MetricsForCluster')
runApp('')
shiny::runApp('~/MetricsForCluster')
?updateSelectInput
runApp('')
runApp('')
?updateSelectInput
shiny::runApp('~/MetricsForCluster')
shiny::runApp('~/MetricsForCluster')
list(NULL, 1, NULL)
is.na(list(NULL, 1, NULL))
is.null(list(NULL, 1, NULL))
map(list(NULL, 1, NULL), is.null)
map2_lgl(list(NULL, 1, NULL), is.null)
map_lgl(list(NULL, 1, NULL), is.null)
runApp('')
map_lgl(list(NULL, 1, NULL), is.null)
shiny::runApp('~/MetricsForCluster')
shiny::runApp('~/MetricsForCluster')
runApp('')
shiny::runApp('~/MetricsForCluster')
runApp('')
shiny::runApp('~/MetricsForCluster')
runApp('')
shiny::runApp('~/MetricsForCluster')
shiny::runApp('~/MetricsForCluster')
?reactiveVal
shiny::runApp('~/MetricsForCluster')
runApp('')
shiny::runApp('~/MetricsForCluster')
shiny::runApp('~/MetricsForCluster')
shiny::runApp('~/MetricsForCluster')
meta <- readClipboard()
head(meta)
meta <- read.table(readClipboard())
meta <- read.table(text=readClipboard())
head(meta)
write.table(meta, file = "wellorder.txt", quote = F, row.names = F)
?radioButtons
shiny::runApp('~/MetricsForCluster')
read.table("MetricsForCluster/wellorder.txt")
read.table("MetricsForCluster/wellorder.txt") %>% head
read.table("MetricsForCluster/wellorder.txt", header = T) %>% head
shiny::runApp('~/MetricsForCluster')
?rhandsontable
shiny::runApp('~/MetricsForCluster')
shiny::runApp('~/MetricsForCluster')
shiny::runApp('~/MetricsForCluster')
shiny::runApp('~/MetricsForCluster')
shiny::runApp('~/MetricsForCluster')
read.table("MetricsForCluster/")
read.table("MetricsForCluster/wellorder.txt", header = T) %>% arrange("V1")
read.table("MetricsForCluster/wellorder.txt", header = T) %>% arrange(!!"V1")
x <- "V1"
read.table("MetricsForCluster/wellorder.txt", header = T) %>% arrange(x)
read.table("MetricsForCluster/wellorder.txt", header = T) %>% arrange(!!x)
read.table("MetricsForCluster/wellorder.txt", header = T) %>% arrange(!!x) %>% str
read.table("MetricsForCluster/wellorder.txt", header = T) %>% dplyr::arrange(!!x) %>% str
read.table("MetricsForCluster/wellorder.txt", header = T) %>% dplyr::arrange(V1) %>% str
read.table("MetricsForCluster/wellorder.txt", header = T) %>% dplyr::arrange(!!enquo(x)) %>% str
read.table("MetricsForCluster/wellorder.txt", header = T) %>% dplyr::arrange(vars(x)) %>% str
x
read.table("MetricsForCluster/wellorder.txt", header = T) %>% dplyr::arrange(!!vars(x)) %>% str
read.table("MetricsForCluster/wellorder.txt", header = T) %>% dplyr::arrange(.dots=x) %>% str
read.table("MetricsForCluster/wellorder.txt", header = T) %>% dplyr::arrange(!!x) %>% str
read.table("MetricsForCluster/wellorder.txt", header = T) %>% dplyr::arrange(!!!x) %>% str
read.table("MetricsForCluster/wellorder.txt", header = T) %>% dplyr::arrange(!!!enquo(x)) %>% str
read.table("MetricsForCluster/wellorder.txt", header = T) %>% dplyr::arrange(!!enquo(x)) %>% str
read.table("MetricsForCluster/wellorder.txt", header = T) %>% dplyr::arrange(!!quo(x)) %>% str
read.table("MetricsForCluster/wellorder.txt", header = T) %>% dplyr::arrange(!!sym(x)) %>% str
shiny::runApp('~/MetricsForCluster')
read.table("MetricsForCluster/wellorder.txt", header = TRUE)
x <- 1:24
names(x) <- as.character(1:24)
x
y <- 1:8
y <- 1:16
names(y) <- LETTERS[1:16]
y
read.table("MetricsForCluster/wellorder.txt", header = TRUE) %>%
mutate(x = x[stringr::str_extract(Well, "\\d+")], y = y[stringr::str_extract(Well, "[A-P]")])
names(x) <- sprintf("%02d", 1:24)
read.table("MetricsForCluster/wellorder.txt", header = TRUE) %>%
mutate(x = x[stringr::str_extract(Well, "\\d+")], y = y[stringr::str_extract(Well, "[A-P]")])
read.table("MetricsForCluster/wellorder.txt", header = TRUE) %>%
mutate(x = x[stringr::str_extract(Well, "\\d+")], y = y[stringr::str_extract(Well, "[A-P]")]) %>%
{plot(y~x, data=., xlim = c(-1, 26), ylim = c(18, -1))}
read.table("MetricsForCluster/wellorder.txt", header = TRUE) %>%
mutate(x = x[stringr::str_extract(Well, "\\d+")], y = y[stringr::str_extract(Well, "[A-P]")]) %>%
{plot(y~x, data=., xlim = c(-1, 26), ylim = c(18, -1), asp=1)}
read.table("MetricsForCluster/wellorder.txt", header = TRUE) %>%
mutate(x = x[stringr::str_extract(Well, "\\d+")], y = y[stringr::str_extract(Well, "[A-P]")]) %>%
{plot(y~x, data=., xlim = c(-1, 26), ylim = c(18, -1), asp=1, axes=F)}
read.table("MetricsForCluster/wellorder.txt", header = TRUE) %>%
mutate(x = x[stringr::str_extract(Well, "\\d+")], y = y[stringr::str_extract(Well, "[A-P]")]) %>%
{plot(y~x, data=., xlim = c(-1, 26), ylim = c(18, -1), asp=1, axes=F, xlab="", ylab="", mar=c(0, 0, 0, 0))}
par(mar = c(0, 0, 0, 0))
read.table("MetricsForCluster/wellorder.txt", header = TRUE) %>%
mutate(x = x[stringr::str_extract(Well, "\\d+")], y = y[stringr::str_extract(Well, "[A-P]")]) %>%
{plot(y~x, data=., xlim = c(-1, 26), ylim = c(18, -1), asp=1, axes=F, xlab="", ylab="")}
read.table("MetricsForCluster/wellorder.txt", header = TRUE) %>%
mutate(x = x[stringr::str_extract(Well, "\\d+")], y = y[stringr::str_extract(Well, "[A-P]")]) %>%
{plot(y~x, data=., xlim = c(-1, 26), ylim = c(18, -1), asp=1, axes=F, xlab="", ylab="", text = .$V1)}
read.table("MetricsForCluster/wellorder.txt", header = TRUE) %>%
mutate(x = x[stringr::str_extract(Well, "\\d+")], y = y[stringr::str_extract(Well, "[A-P]")]) %>%
{plot(y~x, data=., xlim = c(-1, 26), ylim = c(18, -1), asp=1, axes=F, xlab="", ylab="", label = .$V1)}
read.table("MetricsForCluster/wellorder.txt", header = TRUE) %>%
mutate(x = x[stringr::str_extract(Well, "\\d+")], y = y[stringr::str_extract(Well, "[A-P]")]) %>%
{plot(y~x, data=., xlim = c(-1, 26), ylim = c(18, -1), asp=1, axes=F, xlab="", ylab="", = .$V1);
text(x = .$x, y = .$y, text=.$V1)}
read.table("MetricsForCluster/wellorder.txt", header = TRUE) %>%
mutate(x = x[stringr::str_extract(Well, "\\d+")], y = y[stringr::str_extract(Well, "[A-P]")]) %>%
{
plot(y~x, data=., xlim = c(-1, 26), ylim = c(18, -1), asp=1, axes=F, xlab="", ylab="");
text(x = .$x, y = .$y, text=.$V1)
}
read.table("MetricsForCluster/wellorder.txt", header = TRUE) %>%
mutate(x = x[stringr::str_extract(Well, "\\d+")], y = y[stringr::str_extract(Well, "[A-P]")]) %>%
{
plot(y~x, data=., xlim = c(-1, 26), ylim = c(18, -1), asp=1, axes=F, xlab="", ylab="", cex=5);
text(x = .$x, y = .$y, text=.$V2, cex=1)
}
?text
read.table("MetricsForCluster/wellorder.txt", header = TRUE) %>%
mutate(x = x[stringr::str_extract(Well, "\\d+")], y = y[stringr::str_extract(Well, "[A-P]")]) %>%
{
plot(y~x, data=., xlim = c(-1, 26), ylim = c(18, -1), asp=1, axes=F, xlab="", ylab="", cex=5);
text(x = .$x, y = .$y, labels=.$V2, cex=1)
}
dev.off()
df <- data.frame(a=letters, b=LETTERS, x=runif(26), y=runif(26))
g <- ggplot(df, aes(x,y)) + geom_point(aes(text=sprintf('letter: %s\nLetter: %s', a, b)))
g
library(ggplot2)
df <- data.frame(a=letters, b=LETTERS, x=runif(26), y=runif(26))
g <- ggplot(df, aes(x,y)) + geom_point(aes(text=sprintf('letter: %s\nLetter: %s', a, b)))
g
d <- expand.grid(x=1:12, y = 1:8)
plot(d)
plot(d, axes = F)
plot(d, axes = F, xlab="")
plot(d, axes = F, xlab="", ylab = "")
par(mar = c(0, 0, 0, 0))
plot(d, axes = F, xlab="", ylab = "")
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14))
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1))
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1)
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 5)
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 5); text(0, 1:8, LETTERS[1:8])
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 5); text(0, 1:8, LETTERS[1:8]); text(1:12, 0, 1:12)
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 5); text(0, 1:8, LETTERS[1:8]); text(1:12, 0, 1:12); box()
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 5); text(0, 1:8, LETTERS[1:8]); text(1:12, 0, 1:12); rect(-1, -1, 12, 8)
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 5); text(0, 1:8, LETTERS[1:8]); text(1:12, 0, 1:12); rect(-1, -1, 13, 9)
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 5); text(0, 1:8, LETTERS[1:8]); text(1:12, 0, 1:12, cex = 5); rect(-1, -1, 13, 9)
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 5); text(0, 1:8, LETTERS[1:8]); text(1:12, 0, 1:12, cex = 3); rect(-1, -1, 13, 9)
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 5); text(0, 1:8, LETTERS[1:8]); text(1:12, 0, 1:12, cex = 2); rect(-1, -1, 13, 9)
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 6); text(0, 1:8, LETTERS[1:8], cex = 2); text(1:12, 0, 1:12, cex = 2); rect(-1, -1, 13, 9)
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 7); text(0, 1:8, LETTERS[1:8], cex = 2); text(1:12, 0, 1:12, cex = 2); rect(-1, -1, 13, 9)
png("wellplate96.png")
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 7); text(0, 1:8, LETTERS[1:8], cex = 2); text(1:12, 0, 1:12, cex = 2); rect(-1, -1, 13, 9)
dev.off()
?png
png("wellplate96.png", width = 640, height = 640 * 10 / 14)
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 7); text(0, 1:8, LETTERS[1:8], cex = 2); text(1:12, 0, 1:12, cex = 2); rect(-1, -1, 13, 9)
dev.off()
png("wellplate96.png", width = 640, height = 640 * 10 / 14)
par(mar = c(0, 0, 0, 0))
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 7); text(0, 1:8, LETTERS[1:8], cex = 2); text(1:12, 0, 1:12, cex = 2); rect(-1, -1, 13, 9)
dev.off()
png("wellplate96.png", width = 640, height = 640 * 10 / 14)
par(mar = c(5, 5, 0, 0))
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 7); text(0, 1:8, LETTERS[1:8], cex = 2); text(1:12, 0, 1:12, cex = 2); rect(-1, -1, 13, 9)
dev.off()
?par
png("wellplate96.png", width = 640, height = 640 * 10 / 14)
par(mar = c(0, 1, 1, 0))
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 7); text(0, 1:8, LETTERS[1:8], cex = 2); text(1:12, 0, 1:12, cex = 2); rect(-1, -1, 13, 9)
dev.off()
png("wellplate96.png", width = 640, height = 640 * 10 / 14)
par(mar = c(0, 1.5, 1.5, 0))
plot(d, axes = F, xlab="", ylab = "", xlim = c(-1, 14), ylim = c(10, -1), asp = 1, cex = 6, lwd=2); text(0, 1:8, LETTERS[1:8], cex = 2); text(1:12, 0, 1:12, cex = 2); rect(-1, -1, 13, 9)
dev.off()
install.packages(c("ade4", "ape", "arrow", "backports", "BH", "BiocManager", "bitops", "blob", "boot", "brew", "broom", "bsamGP", "callr", "checkmate", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "commonmark", "conquer", "cpp11", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "dbscan", "desc", "devtools", "DiagrammeR", "dials", "DiceDesign", "digest", "dotCall64", "dplyr", "DT", "e1071", "ellipsis", "evaluate", "fansi", "farver", "fastmap", "fda", "fields", "forcats", "foreach", "forecast", "formatR", "Formula", "fs", "ftsa", "furrr", "future", "gdtools", "generics", "geometry", "gganimate", "ggplot2", "gh", "git2r", "globals", "glue", "gower", "gtools", "hardhat", "haven", "hexbin", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "infer", "influenceR", "inline", "inum", "ipred", "isoband", "iterators", "jpeg", "jsonlite", "kernlab", "KernSmooth", "knitr", "ks", "labeling", "later", "lattice", "lava", "lhs", "libcoin", "lifecycle", "linprog", "lmtest", "loo", "lubridate", "magic", "magrittr", "manipulateWidget", "maps", "MASS", "Matrix", "matrixcalc", "MatrixModels", "matrixStats", "mclust", "memoise", "memuse", "mgcv", "Microsoft365R", "mime", "modeldata", "multicool", "mvtnorm", "nlme", "nnet", "officedown", "officer", "openssl", "openxlsx", "optimx", "parallelly", "parsnip", "partykit", "pcaPP", "permute", "pillar", "pixmap", "pkgbuild", "pkgload", "plotly", "plotrix", "plyr", "pROC", "processx", "promises", "ps", "qtl", "quantreg", "R6", "RAINBOWR", "RandomFieldsUtils", "rappdirs", "rcmdcheck", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "readxl", "recipes", "remotes", "reprex", "reticulate", "rex", "rgl", "rlang", "rmarkdown", "rncl", "RNeXML", "roxygen2", "rpart", "rprojroot", "rsample", "RSQLite", "rstan", "rstudioapi", "rsvg", "rversions", "rvest", "sandwich", "scales", "scam", "sessioninfo", "shiny", "signal", "slider", "snow", "sp", "spam", "SparseM", "spatial", "SQUAREM", "StanHeaders", "stringi", "survival", "systemfonts", "testthat", "tibble", "tidymodels", "tidyr", "tidyselect", "tidyverse", "tinytex", "tseries", "TTR", "tune", "tweenr", "usethis", "utf8", "uuid", "V8", "vctrs", "vegan", "viridis", "viridisLite", "visNetwork", "webshot", "withr", "workflows", "xfun", "xml2", "yaml", "yardstick", "zip", "zoo"))
file.edit("~/.Renviron")
install.packages("ggplot2")
install.packages("ggplot2", repos = "https://cran.ism.ac.jp")
file.edit("~/.Renviron")
install.packages("EBImage")
BiocManager::install("EBImage")
density(rnorm(100))
plot(density(rnorm(100)))
install.packages("Microsoft365R")
Microsoft365R::get_business_onedrive()
Microsoft365R::get_team()
Microsoft365R::get_business_onedrive()
Microsoft365R::get_sharepoint_site()
Microsoft365R::get_sharepoint_site("Lxbioanalysis")
Microsoft365R::get_sharepoint_site("https://takiicojp.sharepoint.com/sites/Lxbioanalysis")
Microsoft365R::get_sharepoint_site("Lxbioanalysis", tenant = "takii.co.jp")
setwd("//10.16.4.170/home/osabe/mytools/takit")
x <- read.table("out1")
head(x)
library(ggplot2)
ggplot(x, aes(x=V2, y=V1)) + geom_raster()
ggplot(x, aes(x=V2, y=V1)) + geom_raster(aes(col=V4))
ggplot(x, aes(x=V2, y=V1)) + geom_raster(aes(fill=V4))
ggplot(x, aes(x=V2, y=V1)) + geom_raster(aes(fill=V4), hjust = 0.3)
ggplot(x, aes(x=V2, y=V1)) + geom_raster(aes(fill=V4), vjust = 0.3)
ggplot(x, aes(x=V2, y=V1)) + geom_raster(aes(fill=V4, height=0.1))
ggplot(x, aes(x=V2, y=V1)) + geom_tile(aes(fill=V4, width=1, height=0.1))
ggplot(x, aes(x=V2, y=V1)) + geom_tile(aes(fill=V4, width=1, height=0.2))
ggplot(x, aes(x=V2, y=V1)) + geom_tile(aes(fill=V4, width=1, height=2))
ggplot(x, aes(x=V2, y=V1)) + geom_tile(aes(fill=V4, width=1000000, height=2))
ggplot(x, aes(x=V2/1000000, y=V1)) + geom_tile(aes(fill=V4, width=1, height=2))
ggplot(x, aes(x=V2/1000000, y=V1)) + geom_tile(aes(fill=V4, width=1, height=1))
ggplot(x, aes(x=V2/1000000, y=V1)) + geom_tile(aes(fill=V4, width=1, height=.1))
ggplot(x, aes(x=V2/1000000, y=V1)) + geom_tile(aes(fill=V4, width=1, height=.5))
ggplot(x, aes(x=V2/1000000, y=V1)) +
geom_tile(aes(fill=V4, width=1, height=.5)) +
scale_y_reverse()
?scale_y_discrete
ggplot(x, aes(x=V2/1000000, y=V1)) +
geom_tile(aes(fill=V4, width=1, height=.5)) +
scale_y_discrete(limits=rev)
ggplot(x, aes(x=V2/1000000, y=V1)) +
geom_tile(aes(fill=V4, width=1, height=.5)) +
scale_y_discrete(limits=rev) +
scale_fill_continuous(type="viridis")
?labs
ggplot(x, aes(x=V2/1000000, y=V1)) +
geom_tile(aes(fill=V4, width=1, height=.5)) +
scale_y_discrete(limits=rev) +
scale_fill_continuous(type="viridis") +
labs(x = "Position(Mbp)", y = "Chromosome")
ggplot(x, aes(x=V2/1000000, y=V1)) +
geom_tile(aes(fill=log10(V4), width=1, height=.5)) +
scale_y_discrete(limits=rev) +
scale_fill_continuous(type="viridis") +
labs(x = "Position(Mbp)", y = "Chromosome")
X
X
x
hist(x$V4)
rug
rug(x$V4)
summarise_coord(x$V4)
summary(x$V4)
10 * 3.7
10 ^ 3.7
5000 / 1000000
ggplot(x, aes(x=V2/1000000, y=V1)) +
geom_tile(aes(fill=log10(V4), width=1, height=.5)) +
scale_y_discrete(limits=rev) +
scale_fill_continuous(type="viridis") +
labs(x = "Position(Mbp)", y = "Chromosome")
ggplot(x, aes(x=V2/1000000, y=V1)) +
geom_tile(aes(fill=V4, width=1, height=.5)) +
scale_y_discrete(limits=rev) +
scale_fill_continuous(type="viridis") +
labs(x = "Position(Mbp)", y = "Chromosome", title = "Number of SNPs in 1Mbp bin")
ggsave("SNP_density.png", width = 10, height = 7)
ggplot(x, aes(x=V2/1000000, y=V1)) +
geom_tile(aes(fill=V4, width=1, height=.5)) +
scale_y_discrete(limits=rev) +
scale_fill_continuous(type="viridis") +
labs(x = "Position(Mbp)", y = "Chromosome", legend = "",  title = "Number of SNPs in 1Mbp bin")
ggplot(x, aes(x=V2/1000000, y=V1)) +
geom_tile(aes(fill=V4, width=1, height=.5)) +
scale_y_discrete(limits=rev) +
scale_fill_continuous(type="viridis", name = "No. of SNPs") +
labs(x = "Position(Mbp)", y = "Chromosome", title = "Number of SNPs in 1Mbp bin") +
ggsave("SNP_density.png", width = 10, height = 7)
ggplot(x, aes(x=V2/1000000, y=V1)) +
geom_tile(aes(fill=V4, width=1, height=.5)) +
scale_y_discrete(limits=rev) +
scale_fill_continuous(type="viridis", name = "No. of SNPs") +
labs(x = "Position(Mbp)", y = "Chromosome", title = "Number of SNPs in 1Mbp bin")
ggsave("SNP_density.png", width = 10, height = 7)
ggplot(x, aes(x=V2/1000000, y=V1)) +
geom_tile(aes(fill=V4, width=1, height=.5)) +
scale_y_discrete(limits=rev) +
scale_fill_continuous(type="viridis", name = "No. of SNPs") +
labs(x = "Position(Mbp)", y = "Chromosome", title = "Number of SNPs in 1Mbp bin") +
theme(text = element_text(size=20))
ggsave("SNP_density.png", width = 10, height = 7)
